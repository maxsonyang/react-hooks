{"version":3,"sources":["webpack://react-hooks/./src/components/useForm.js","webpack://react-hooks/./src/components/useEffectCleanup.js","webpack://react-hooks/./src/pages/useEffect.js","webpack://react-hooks/./src/components/useFetch.js"],"names":["useForm","initialValues","useState","values","setValues","e","target","name","value","email","password","form","updateForm","onSubmit","alert","placeholder","onChange","type","useEffect","console","log","getRandomInt","max","Math","floor","random","firstName","lastName","randomNumber","setRandomNumber","url","data","loading","state","setState","fetch","then","r","text","useFetch","show","setShow","count","setCount","storedCount","localStorage","getItem","JSON","parse","setItem","stringify","className","onClick","to","c"],"mappings":"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","file":"component---src-pages-use-effect-js-455c2f0a5820e41e73c9.js","sourcesContent":["import React, { useState } from 'react';\n\n/*\n  Generalized component where we can describe and store state\n  however we'd like, and plug it into a UI component.\n*/\n\nexport function useForm(initialValues) {\n  const [values, setValues] = useState(initialValues);\n\n  return [values, e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value\n    })\n  }]\n}\n\nfunction FormExample() {\n  const [form, updateForm] = useForm({ email: \"\", password: \"\" })\n\n  return(\n    <form onSubmit={() => alert(`email: ${form.email} password: ${form.password}`)}>\n      <input\n        name=\"email\"\n        placeholder=\"email\"\n        value={form.email}\n        onChange={updateForm}\n      />\n      <input\n        name=\"password\"\n        placeholder=\"password\"\n        type=\"password\"\n        value={form.password}\n        onChange={updateForm}\n      />\n      <input\n        name=\"submit\"\n        type=\"submit\"\n        value=\"submit\"\n      />\n    </form>\n  )\n}\n\nexport default FormExample;","import React, { useEffect } from 'react';\n\nfunction CleanupComponent() {\n  /*\n    Example of returning a clean-up function on useEffect.\n  */\n\n  useEffect(() => {\n    console.log(\"Hi, I exist!\")\n    console.log(\"Child components are mounted first.\")\n\n    return (() => {\n      console.log(\"Good bye!\")\n    })\n  }, []);\n\n  return (\n    <div>Hello! I exist!</div>\n  )\n\n}\n\nexport default CleanupComponent;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'gatsby';\nimport { useForm } from \"../components/useForm\";\nimport { useFetch } from \"../components/useFetch\";\nimport CleanupComponent from \"../components/useEffectCleanup\";\nimport \"../styles/pages/hooks.scss\";\n\nfunction UseStatePage() {\n\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  const [values, setValues] = useForm({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\"\n  })\n  const [randomNumber, setRandomNumber] = useState(() => getRandomInt(100))\n\n  const {data, loading} = useFetch(`https://numbersapi.com/${randomNumber}/trivia`)\n\n  const [show, setShow] = useState(true);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const storedCount = localStorage.getItem(\"count\");\n    if (storedCount) {\n      setCount(JSON.parse(storedCount))\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log(\"Only called when email is updated.\")\n\n    // Can be useful for adding event handlers.\n    // const handleMouseMove = (e) => {\n    //   console.log(`${e.clientX}, ${e.clientY}`);\n    // }\n    // window.addEventListener('mousemove', handleMouseMove);\n\n    // Practical example of clean-up using useEffect's clean-up.\n    return () => {\n      // window.removeEventListener('mousemove', handleMouseMove);\n    }\n    \n  }, [values.email])\n\n\n  useEffect(() => {\n    console.log(\"Multiple useEffects can be added, and they fire in order.\")\n    localStorage.setItem('count', JSON.stringify(count));\n  }, [count])\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"page-header\">\n        <h1>\n          useEffect\n        </h1>\n        <div className=\"page-subheader\">\n          Hook that's called after each render.\n          Most of these examples log something to console, so you'll want to\n          open that up.\n        </div>\n      </div>\n\n      {/* Basic useEffect Example */}\n      <div className=\"hooks-content\">\n        <h2>\n          Basic useEffect Example\n        </h2>\n        <div className=\"blurb\">\n          useEffect is a hook that's called after each render. You can include\n          an array of variables and/or functions as a second argument so that useEffect \n          is only called when those variables are updated. Leaving it empty means useEffect\n          will not be called on re-renders.\n        </div>\n        <form>\n          <input\n            name=\"firstName\"\n            placeholder=\"First Name\"\n            value={values.firstName}\n            onChange={setValues}\n          />\n          <input\n            name=\"lastName\"\n            placeholder=\"Last Name\"\n            value={values.lastName}\n            onChange={setValues}\n          />\n          <input\n            name=\"email\"\n            placeholder=\"Email\"\n            value={values.email}\n            onChange={setValues}\n          />\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            value={values.password}\n            onChange={setValues}\n          />\n        </form>\n      </div>\n\n      {/* Clean-up example. */}\n      <div className=\"hooks-content\">\n        <h2>\n          Clean-up/Unmount\n        </h2>\n        <div className=\"blurb\">\n          useEffect can also return a function that handles\n          the \"clean-up\" logic of a component when it unmounts.\n        </div>\n        <button onClick={() => setShow((show) => !show)}>\n          Toggle show\n        </button>\n        {show && <CleanupComponent />}\n      </div>\n\n      {/* API fetch example. */}\n      <div className=\"hooks-content\">\n        <h2>\n          API fetch example.\n        </h2>\n        <div className=\"blurb\">\n          useEffect can be a good spot to fetch data from APIs as well.\n          API used: <Link to=\"http://numbersapi.com/\" target=\"_blank\">Numbers API</Link>\n        </div>\n        <div>\n          {loading ? 'fun fact loading...' : data }\n        </div>\n        <button onClick={() => setRandomNumber(() => getRandomInt(100))}>\n          Get a new fact!\n        </button>\n      </div>\n\n      {/* Local Storage Example */}\n      <div className=\"hooks-content\">\n        <h2>\n          Local Storage Example\n        </h2>\n        <div className=\"blurb\">\n          useEffect can also be useful for persisting data, that is updating\n          values that we'd like to persist.\n        </div>\n        <div>\n          The count is: {`${count}`}\n        </div>\n        <button onClick={() => setCount((c) => c + 1)}>\n          Increase it!\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default UseStatePage;","import { useState, useEffect } from 'react';\n\nexport function useFetch(url) {\n\n  const [state, setState] = useState({\n    data : null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }))\n    fetch(url)\n      .then(r => r.text())\n      .then(text => {\n       setState({ data: text, loading: false})\n      })\n  }, [url, setState])\n\n  return state;\n}"],"sourceRoot":""}
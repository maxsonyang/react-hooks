{"version":3,"sources":["webpack://react-hooks/./src/components/useFetch.js","webpack://react-hooks/./src/components/useForm.js","webpack://react-hooks/./src/components/useEffectCleanup.js","webpack://react-hooks/./src/pages/useEffect.js","webpack://react-hooks/./src/components/useMeasure.js"],"names":["useFetch","url","useState","data","loading","state","setState","useEffect","fetch","then","r","text","BuggyFetch","setTimeout","SafeBuggyFetch","isCurrent","useRef","current","useForm","initialValues","values","setValues","e","target","name","value","email","password","form","updateForm","onSubmit","alert","placeholder","onChange","type","console","log","getRandomInt","max","Math","floor","random","firstName","lastName","randomNumber","setRandomNumber","show","setShow","count","setCount","layoutInput","setLayoutInput","inputRef","funFactRef","storedCount","localStorage","getItem","JSON","parse","setItem","stringify","rect","ref","deps","setRect","useLayoutEffect","getBoundingClientRect","useMeasure","className","onClick","href","style","display","c"],"mappings":"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","file":"component---src-pages-use-effect-js-d7a43b0a4c6730b3d3c0.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nexport function useFetch(url) {\n\n  const [state, setState] = useState({\n    data : null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }))\n    fetch(url)\n      .then(r => r.text())\n      .then(text => {\n       setState({ data: text, loading: false})\n      })\n  }, [url, setState])\n\n  return state;\n}\n\nexport function useSlowFetch(url) {\n  const [state, setState] = useState({\n    data : null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }))\n    fetch(url)\n      .then(r => r.text())\n      .then(text => {\n        setTimeout(() => {\n          setState({ data: text, loading: false})\n        }, 4000)\n      })\n  }, [url, setState])\n\n  return state;\n}\n\nexport function useSaferSlowFetch(url) {\n  const isCurrent = useRef(true);\n  const [state, setState] = useState({\n    data : null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    return () => {\n      // called when component unmounts.\n      isCurrent.current = false;\n    }\n  })\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }))\n    fetch(url)\n      .then(r => r.text())\n      .then(text => {\n        setTimeout(() => {\n          if (!isCurrent.current) {\n            setState({ data: text, loading: false})\n          }\n        }, 4000)\n      })\n  }, [url, setState])\n\n  return state;\n}\n\nexport function BuggyFetch() {\n\n  const { data, loading } = useSlowFetch(`http://numbersapi.com/42/trivia`)\n  return (\n    <div>\n      <div>{loading ? \"loading very slowly...\" : data}</div>\n    </div>\n  )\n}\n\nexport function SafeBuggyFetch() {\n\n  const { data, loading } = useSaferSlowFetch(`http://numbersapi.com/42/trivia`)\n  return (\n    <div>\n      <div>{loading ? \"loading very slowly...\" : data}</div>\n    </div>\n  )\n}","import React, { useState } from 'react';\n\n/*\n  Generalized component where we can describe and store state\n  however we'd like, and plug it into a UI component.\n*/\n\nexport function useForm(initialValues) {\n  const [values, setValues] = useState(initialValues);\n\n  return [values, e => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value\n    })\n  }]\n}\n\nfunction FormExample() {\n  const [form, updateForm] = useForm({ email: \"\", password: \"\" })\n\n  return(\n    <form onSubmit={() => alert(`email: ${form.email} password: ${form.password}`)}>\n      <input\n        name=\"email\"\n        placeholder=\"email\"\n        value={form.email}\n        onChange={updateForm}\n      />\n      <input\n        name=\"password\"\n        placeholder=\"password\"\n        type=\"password\"\n        value={form.password}\n        onChange={updateForm}\n      />\n      <input\n        name=\"submit\"\n        type=\"submit\"\n        value=\"submit\"\n      />\n    </form>\n  )\n}\n\nexport default FormExample;","import React, { useEffect } from 'react';\n\nfunction CleanupComponent() {\n  /*\n    Example of returning a clean-up function on useEffect.\n  */\n\n  useEffect(() => {\n    console.log(\"Hi, I exist!\")\n    console.log(\"Child components are mounted first.\")\n\n    return (() => {\n      console.log(\"Good bye!\")\n    })\n  }, []);\n\n  return (\n    <div>Hello! I exist!</div>\n  )\n\n}\n\nexport default CleanupComponent;","import React, { useState, useEffect, useRef } from 'react';\nimport { useForm } from \"../components/useForm\";\nimport { useFetch } from \"../components/useFetch\";\nimport { useMeasure } from \"../components/useMeasure\";\nimport CleanupComponent from \"../components/useEffectCleanup\";\nimport \"../styles/pages/hooks.scss\";\n\nfunction UseStatePage() {\n\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  const [values, setValues] = useForm({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\"\n  })\n\n  const [randomNumber, setRandomNumber] = useState(() => getRandomInt(100))\n  const {data, loading} = useFetch(`http://numbersapi.com/${randomNumber}/trivia`)\n  const [show, setShow] = useState(true);\n  const [count, setCount] = useState(0);\n  const [layoutInput, setLayoutInput] = useState(\"\")\n  const inputRef = useRef();\n  const funFactRef = useRef();\n\n  useEffect(() => {\n    const storedCount = localStorage.getItem(\"count\");\n    if (storedCount) {\n      setCount(JSON.parse(storedCount))\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log(\"Only called when email is updated.\")\n\n    // Can be useful for adding event handlers.\n    // const handleMouseMove = (e) => {\n    //   console.log(`${e.clientX}, ${e.clientY}`);\n    // }\n    // window.addEventListener('mousemove', handleMouseMove);\n\n    // Practical example of clean-up using useEffect's clean-up.\n    return () => {\n      // window.removeEventListener('mousemove', handleMouseMove);\n    }\n    \n  }, [values.email])\n\n\n  useEffect(() => {\n    console.log(\"Multiple useEffects can be added, and they fire in order.\")\n    localStorage.setItem('count', JSON.stringify(count));\n  }, [count])\n  \n  // useLayoutEffect(() => {\n  //   // console.log(inputRef.current.getBoundingClientRect());\n  //   setRect(funFactRef.current.getBoundingClientRect());\n  // }, [data])\n\n  // Same thing as above but using a custom hook.\n  const rect = useMeasure(funFactRef, [data]);\n\n  return (\n    <>\n    {/* <Helmet>\n      <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\" /> \n    </Helmet> */}\n      <div className=\"container-fluid\">\n        <div className=\"page-header\">\n          <h1>\n            useEffect\n          </h1>\n          <div className=\"page-subheader\">\n            Hook that's called after each render.\n            Most of these examples log something to console, so you'll want to\n            open that up.\n          </div>\n        </div>\n\n        {/* Basic useEffect Example */}\n        <div className=\"hooks-content\">\n          <h2>\n            Basic useEffect Example\n          </h2>\n          <div className=\"blurb\">\n            useEffect is a hook that's called after each render. You can include\n            an array of variables and/or functions as a second argument so that useEffect \n            is only called when those variables are updated. Leaving it empty means useEffect\n            will not be called on re-renders.\n          </div>\n          <form>\n            <input\n              name=\"firstName\"\n              placeholder=\"First Name\"\n              value={values.firstName}\n              onChange={setValues}\n            />\n            <input\n              name=\"lastName\"\n              placeholder=\"Last Name\"\n              value={values.lastName}\n              onChange={setValues}\n            />\n            <input\n              name=\"email\"\n              placeholder=\"Email\"\n              value={values.email}\n              onChange={setValues}\n            />\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              value={values.password}\n              onChange={setValues}\n            />\n          </form>\n        </div>\n\n        {/* Clean-up example. */}\n        <div className=\"hooks-content\">\n          <h2>\n            Clean-up/Unmount\n          </h2>\n          <div className=\"blurb\">\n            useEffect can also return a function that handles\n            the \"clean-up\" logic of a component when it unmounts.\n          </div>\n          <button onClick={() => setShow((show) => !show)}>\n            Toggle show\n          </button>\n          {show && <CleanupComponent />}\n        </div>\n\n        {/* API fetch example. */}\n        <div className=\"hooks-content\">\n          <h2>\n            API fetch example.\n          </h2>\n          <div className=\"blurb\">\n            useEffect can be a good spot to fetch data from APIs as well.\n            API used: <a href=\"https://numbersapi.com/\" target=\"_blank\">Numbers API</a>\n          </div>\n          <div style={{display: \"flex\"}}>\n            {loading ? 'fun fact loading...' : data }\n          </div>\n          <button onClick={() => {setRandomNumber(() => getRandomInt(100))}}>\n            Give me another.\n          </button>\n        </div>\n\n        {/* Local Storage Example */}\n        <div className=\"hooks-content\">\n          <h2>\n            Local Storage Example\n          </h2>\n          <div className=\"blurb\">\n            useEffect can also be useful for persisting data, in this case\n            making a call to localStorage to save each time the count is\n            updated.\n          </div>\n          <div>\n            The count is: {`${count}`}\n          </div>\n          <button onClick={() => setCount((c) => c + 1)}>\n            Increase it!\n          </button>\n        </div>\n\n        <div className=\"page-header\">\n          <h1>\n            useLayoutEffect\n          </h1>\n          <div className=\"page-subheader\">\n            Very similar to useEffect apparently, but has a more\n            niche use case. Not really sure what that's all about yet.\n            According to the docs, it \"fires synchronously after all DOM\n            mutations.\"\n          </div>\n        </div>\n\n        <div className=\"hooks-content\">\n          <h2>\n            Basic example of useLayoutEffect.\n          </h2>\n          <div className=\"blurb\">\n            Using this to get the input's rect. Note that this\n            has been commented out.\n          </div>\n          <div>\n            <input\n              ref={inputRef}\n              name=\"layoutInput\"\n              value={layoutInput}\n              onChange={(e) => setLayoutInput(() => e.target.value)}\n            />\n          </div>\n        </div>\n\n        {/* Using useLayoutEffect to measure a div. */}\n        <div className=\"hooks-content\">\n          <h2>\n            Revisiting numbers API\n          </h2>\n          <div className=\"blurb\">\n            Showing how useLayoutEffect can be used in a more practical way.\n          </div>\n          <div>\n            <div style={{display: \"flex\"}}>\n              <div ref={funFactRef}>\n                {loading ? 'fun fact loading...' : data }\n              </div>\n            </div>\n            <div>\n              Measurements of the fun fact div above.\n            </div>\n            <pre>\n              {JSON.stringify(rect, null, 2)}\n            </pre>\n            <button onClick={() => {setRandomNumber(() => getRandomInt(100))}}>\n              Give me another.\n            </button>\n          </div>\n        </div>\n\n        <div className=\"hooks-content\">\n          <h2>\n            Conclusion (sort of)\n          </h2>\n          <div className=\"blurb\">\n            It seems the gist/pattern that you'd use this is if you want to apply\n            any effects after the everything has finished rendering? It's still not\n            clear to me so I'll apply an incremental approach as suggested in the docs.\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default UseStatePage;","import {useState, useLayoutEffect} from 'react';\n\nexport function useMeasure(ref, deps) {\n  const [rect, setRect] = useState({})\n\n  useLayoutEffect(() => {\n    setRect(ref.current.getBoundingClientRect())\n  }, deps)\n\n  return rect;\n}"],"sourceRoot":""}
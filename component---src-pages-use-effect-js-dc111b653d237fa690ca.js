(self.webpackChunkreact_hooks=self.webpackChunkreact_hooks||[]).push([[161],{8178:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var a=n(7294),l=n(5414),o=n(6638);var c=function(){return(0,a.useEffect)((function(){return console.log("Hi, I exist!"),console.log("Child components are mounted first."),function(){console.log("Good bye!")}}),[]),a.createElement("div",null,"Hello! I exist!")};var r=function(){var e=function(e){return Math.floor(Math.random()*e)},t=(0,o.c)({firstName:"",lastName:"",email:"",password:""}),n=t[0],r=t[1],s=(0,a.useState)((function(){return e(100)})),u=s[0],i=s[1],m=function(e){var t=(0,a.useState)({data:null,loading:!0}),n=t[0],l=t[1];return(0,a.useEffect)((function(){l((function(e){return{data:e.data,loading:!0}})),fetch(e).then((function(e){return e.text()})).then((function(e){l({data:e,loading:!1})}))}),[e,l]),n}("http://numbersapi.com/"+u+"/trivia"),f=m.data,d=m.loading,h=(0,a.useState)(!0),E=h[0],p=h[1],g=(0,a.useState)(0),v=g[0],b=g[1];return(0,a.useEffect)((function(){var e=localStorage.getItem("count");e&&b(JSON.parse(e))}),[]),(0,a.useEffect)((function(){return console.log("Only called when email is updated."),function(){}}),[n.email]),(0,a.useEffect)((function(){console.log("Multiple useEffects can be added, and they fire in order."),localStorage.setItem("count",JSON.stringify(v))}),[v]),a.createElement(a.Fragment,null,a.createElement(l.q,null,a.createElement("meta",{"http-equiv":"Content-Security-Policy",content:"upgrade-insecure-requests"})),a.createElement("div",{className:"container-fluid"},a.createElement("div",{className:"page-header"},a.createElement("h1",null,"useEffect"),a.createElement("div",{className:"page-subheader"},"Hook that's called after each render. Most of these examples log something to console, so you'll want to open that up.")),a.createElement("div",{className:"hooks-content"},a.createElement("h2",null,"Basic useEffect Example"),a.createElement("div",{className:"blurb"},"useEffect is a hook that's called after each render. You can include an array of variables and/or functions as a second argument so that useEffect is only called when those variables are updated. Leaving it empty means useEffect will not be called on re-renders."),a.createElement("form",null,a.createElement("input",{name:"firstName",placeholder:"First Name",value:n.firstName,onChange:r}),a.createElement("input",{name:"lastName",placeholder:"Last Name",value:n.lastName,onChange:r}),a.createElement("input",{name:"email",placeholder:"Email",value:n.email,onChange:r}),a.createElement("input",{name:"password",type:"password",placeholder:"Password",value:n.password,onChange:r}))),a.createElement("div",{className:"hooks-content"},a.createElement("h2",null,"Clean-up/Unmount"),a.createElement("div",{className:"blurb"},'useEffect can also return a function that handles the "clean-up" logic of a component when it unmounts.'),a.createElement("button",{onClick:function(){return p((function(e){return!e}))}},"Toggle show"),E&&a.createElement(c,null)),a.createElement("div",{className:"hooks-content"},a.createElement("h2",null,"API fetch example."),a.createElement("div",{className:"blurb"},"useEffect can be a good spot to fetch data from APIs as well. API used: ",a.createElement("a",{href:"http://numbersapi.com/",target:"_blank"},"Numbers API")),a.createElement("div",null,d?"fun fact loading...":f),a.createElement("button",{onClick:function(){return i((function(){return e(100)}))}},"Get a new fact!")),a.createElement("div",{className:"hooks-content"},a.createElement("h2",null,"Local Storage Example"),a.createElement("div",{className:"blurb"},"useEffect can also be useful for persisting data, that is updating values that we'd like to persist."),a.createElement("div",null,"The count is: ",""+v),a.createElement("button",{onClick:function(){return b((function(e){return e+1}))}},"Increase it!"))))}}}]);
//# sourceMappingURL=component---src-pages-use-effect-js-dc111b653d237fa690ca.js.map
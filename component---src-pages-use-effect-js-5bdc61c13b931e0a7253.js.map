{"version":3,"sources":["webpack://react-hooks/./src/components/useEffectCleanup.js","webpack://react-hooks/./src/pages/useEffect.js","webpack://react-hooks/./src/components/useFetch.js"],"names":["useEffect","console","log","useForm","firstName","lastName","email","password","values","setValues","useState","randomNumber","url","data","loading","state","setState","fetch","then","r","text","useFetch","show","setShow","count","setCount","storedCount","localStorage","getItem","JSON","parse","setItem","stringify","Helmet","http-equiv","content","className","name","placeholder","value","onChange","type","onClick","href","target","c"],"mappings":"8LAsBA,MApBA,WAcE,OATAA,gBAAU,WAIR,OAHAC,QAAQC,IAAI,gBACZD,QAAQC,IAAI,uCAEJ,WACND,QAAQC,IAAI,gBAEb,IAGD,+CCkJJ,MA5JA,WAEE,IAIA,GAA4BC,OAAQ,CAClCC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,KAJLC,EAAP,KAAeC,EAAf,KAMA,GAAwCC,cAAS,IAA1CC,EAAP,KAEA,GAFA,KCjBK,SAAkBC,GAEvB,OAA0BF,cAAS,CACjCG,KAAO,KACPC,SAAS,IAFJC,EAAP,KAAcC,EAAd,KAcA,OATAhB,gBAAU,WACRgB,GAAS,SAAAD,GAAK,MAAK,CAAEF,KAAME,EAAMF,KAAMC,SAAS,MAChDG,MAAML,GACHM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAE,GACLJ,EAAS,CAAEH,KAAMO,EAAMN,SAAS,SAElC,CAACF,EAAKI,IAEFD,EDGiBM,CAAS,yBAAyBV,EAA1B,YAAzBE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAEb,GAAwBJ,eAAS,GAA1BY,EAAP,KAAaC,EAAb,KACA,GAA0Bb,cAAS,GAA5Bc,EAAP,KAAcC,EAAd,KA+BA,OA7BAzB,gBAAU,WACR,IAAM0B,EAAcC,aAAaC,QAAQ,SACrCF,GACFD,EAASI,KAAKC,MAAMJ,MAErB,KAEH1B,gBAAU,WAUR,OATAC,QAAQC,IAAI,sCASL,eAIN,CAACM,EAAOF,SAGXN,gBAAU,WACRC,QAAQC,IAAI,6DACZyB,aAAaI,QAAQ,QAASF,KAAKG,UAAUR,MAC5C,CAACA,IAGF,gCACA,gBAACS,EAAA,EAAD,KACE,wBAAMC,aAAW,0BAA0BC,QAAQ,+BAEnD,uBAAKC,UAAU,mBACb,uBAAKA,UAAU,eACb,uCAGA,uBAAKA,UAAU,kBAAf,2HAQF,uBAAKA,UAAU,iBACb,qDAGA,uBAAKA,UAAU,SAAf,0QAMA,4BACE,yBACEC,KAAK,YACLC,YAAY,aACZC,MAAO/B,EAAOJ,UACdoC,SAAU/B,IAEZ,yBACE4B,KAAK,WACLC,YAAY,YACZC,MAAO/B,EAAOH,SACdmC,SAAU/B,IAEZ,yBACE4B,KAAK,QACLC,YAAY,QACZC,MAAO/B,EAAOF,MACdkC,SAAU/B,IAEZ,yBACE4B,KAAK,WACLI,KAAK,WACLH,YAAY,WACZC,MAAO/B,EAAOD,SACdiC,SAAU/B,MAMhB,uBAAK2B,UAAU,iBACb,8CAGA,uBAAKA,UAAU,SAAf,2GAIA,0BAAQM,QAAS,kBAAMnB,GAAQ,SAACD,GAAD,OAAWA,OAA1C,eAGCA,GAAQ,gBAAC,EAAD,OAIX,uBAAKc,UAAU,iBACb,gDAGA,uBAAKA,UAAU,SAAf,2EAEY,qBAAGO,KAAK,0BAA0BC,OAAO,UAAzC,gBAEZ,2BACG9B,EAAU,sBAAwBD,IAKvC,uBAAKuB,UAAU,iBACb,mDAGA,uBAAKA,UAAU,SAAf,wIAKA,+CACoBZ,GAEpB,0BAAQkB,QAAS,kBAAMjB,GAAS,SAACoB,GAAD,OAAOA,EAAI,OAA3C","file":"component---src-pages-use-effect-js-5bdc61c13b931e0a7253.js","sourcesContent":["import React, { useEffect } from 'react';\n\nfunction CleanupComponent() {\n  /*\n    Example of returning a clean-up function on useEffect.\n  */\n\n  useEffect(() => {\n    console.log(\"Hi, I exist!\")\n    console.log(\"Child components are mounted first.\")\n\n    return (() => {\n      console.log(\"Good bye!\")\n    })\n  }, []);\n\n  return (\n    <div>Hello! I exist!</div>\n  )\n\n}\n\nexport default CleanupComponent;","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from \"../components/useForm\";\nimport { useFetch } from \"../components/useFetch\";\nimport CleanupComponent from \"../components/useEffectCleanup\";\nimport \"../styles/pages/hooks.scss\";\n\nfunction UseStatePage() {\n\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n  const [values, setValues] = useForm({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\"\n  })\n  const [randomNumber, setRandomNumber] = useState(12)\n\n  const {data, loading} = useFetch(`http://numbersapi.com/${randomNumber}/trivia`)\n\n  const [show, setShow] = useState(true);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const storedCount = localStorage.getItem(\"count\");\n    if (storedCount) {\n      setCount(JSON.parse(storedCount))\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log(\"Only called when email is updated.\")\n\n    // Can be useful for adding event handlers.\n    // const handleMouseMove = (e) => {\n    //   console.log(`${e.clientX}, ${e.clientY}`);\n    // }\n    // window.addEventListener('mousemove', handleMouseMove);\n\n    // Practical example of clean-up using useEffect's clean-up.\n    return () => {\n      // window.removeEventListener('mousemove', handleMouseMove);\n    }\n    \n  }, [values.email])\n\n\n  useEffect(() => {\n    console.log(\"Multiple useEffects can be added, and they fire in order.\")\n    localStorage.setItem('count', JSON.stringify(count));\n  }, [count])\n\n  return (\n    <>\n    <Helmet>\n      <meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\" /> \n    </Helmet>\n      <div className=\"container-fluid\">\n        <div className=\"page-header\">\n          <h1>\n            useEffect\n          </h1>\n          <div className=\"page-subheader\">\n            Hook that's called after each render.\n            Most of these examples log something to console, so you'll want to\n            open that up.\n          </div>\n        </div>\n\n        {/* Basic useEffect Example */}\n        <div className=\"hooks-content\">\n          <h2>\n            Basic useEffect Example\n          </h2>\n          <div className=\"blurb\">\n            useEffect is a hook that's called after each render. You can include\n            an array of variables and/or functions as a second argument so that useEffect \n            is only called when those variables are updated. Leaving it empty means useEffect\n            will not be called on re-renders.\n          </div>\n          <form>\n            <input\n              name=\"firstName\"\n              placeholder=\"First Name\"\n              value={values.firstName}\n              onChange={setValues}\n            />\n            <input\n              name=\"lastName\"\n              placeholder=\"Last Name\"\n              value={values.lastName}\n              onChange={setValues}\n            />\n            <input\n              name=\"email\"\n              placeholder=\"Email\"\n              value={values.email}\n              onChange={setValues}\n            />\n            <input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              value={values.password}\n              onChange={setValues}\n            />\n          </form>\n        </div>\n\n        {/* Clean-up example. */}\n        <div className=\"hooks-content\">\n          <h2>\n            Clean-up/Unmount\n          </h2>\n          <div className=\"blurb\">\n            useEffect can also return a function that handles\n            the \"clean-up\" logic of a component when it unmounts.\n          </div>\n          <button onClick={() => setShow((show) => !show)}>\n            Toggle show\n          </button>\n          {show && <CleanupComponent />}\n        </div>\n\n        {/* API fetch example. */}\n        <div className=\"hooks-content\">\n          <h2>\n            API fetch example.\n          </h2>\n          <div className=\"blurb\">\n            useEffect can be a good spot to fetch data from APIs as well.\n            API used: <a href=\"https://numbersapi.com/\" target=\"_blank\">Numbers API</a>\n          </div>\n          <div>\n            {loading ? 'fun fact loading...' : data }\n          </div>\n        </div>\n\n        {/* Local Storage Example */}\n        <div className=\"hooks-content\">\n          <h2>\n            Local Storage Example\n          </h2>\n          <div className=\"blurb\">\n            useEffect can also be useful for persisting data, in this case\n            making a call to localStorage to save each time the count is\n            updated.\n          </div>\n          <div>\n            The count is: {`${count}`}\n          </div>\n          <button onClick={() => setCount((c) => c + 1)}>\n            Increase it!\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default UseStatePage;","import { useState, useEffect } from 'react';\n\nexport function useFetch(url) {\n\n  const [state, setState] = useState({\n    data : null,\n    loading: true,\n  })\n\n  useEffect(() => {\n    setState(state => ({ data: state.data, loading: true }))\n    fetch(url)\n      .then(r => r.text())\n      .then(text => {\n       setState({ data: text, loading: false})\n      })\n  }, [url, setState])\n\n  return state;\n}"],"sourceRoot":""}
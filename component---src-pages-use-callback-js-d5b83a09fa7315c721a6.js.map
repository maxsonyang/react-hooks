{"version":3,"sources":["webpack://react-hooks/./src/components/countRenders.js","webpack://react-hooks/./src/components/useCallbackComponent.js","webpack://react-hooks/./src/pages/useCallback.js"],"names":["useCountRenders","renders","useRef","console","log","current","Boop","React","increment","onClick","NumberedBoop","n","useState","counter","updateCounter","useCallback","c","className","map","key"],"mappings":"0KAEO,SAASA,IACd,IAAMC,GAAUC,YAAO,GAEvB,OADAC,QAAQC,IAAI,YAAaH,EAAQI,WAC1BJ,ECFF,IAAMK,EAAOC,QAAW,YAAoB,IAAjBC,EAAgB,EAAhBA,UAUhC,OAFAR,IAGE,0BAAQS,QAAS,kBAAMD,EAAU,KAAjC,YAMSE,EAAeH,QAAW,YAAuB,IAApBI,EAAmB,EAAnBA,EAAGH,EAAgB,EAAhBA,UAI3C,OAFAR,IAGE,0BAAQS,QAAS,kBAAMD,EAAUG,KAC9BA,MC2BP,MAhDA,WAEE,OAAiCC,cAAS,GAAnCC,EAAP,KAAgBC,EAAhB,KAGMN,GAAYO,kBAAY,SAACJ,GAC7BG,GAAc,SAAAE,GAAC,OAAIA,EAAIL,OACtB,CAACG,IAEJ,OACE,uBAAKG,UAAU,mBACb,uBAAKA,UAAU,eACb,yCAGA,uBAAKA,UAAU,kBAAf,4BAIF,uBAAKA,UAAU,iBACb,4CAGA,uBAAKA,UAAU,SAAf,qKAKA,2BACE,uCAAeJ,GACf,gBAACP,EAAD,CAAME,UAAWA,IA3BX,CAAC,EAAG,EAAG,EAAG,IA6BRU,KAAI,SAACP,GACT,OACE,gBAACD,EAAD,CACEC,EAAGA,EACHF,QAAS,kBAAMD,EAAUG,IACzBH,UAAWA,EACXW,IAAKR","file":"component---src-pages-use-callback-js-d5b83a09fa7315c721a6.js","sourcesContent":["import { useRef } from 'react';\n\nexport function useCountRenders() {\n  const renders = useRef(0);\n  console.log(\"renders: \", renders.current++);\n  return renders;\n}","import React, { useRef } from \"react\";\nimport { useCountRenders } from \"../components/countRenders\";\n\nexport const Boop = React.memo(({ increment }) => {\n  /*\n    Side note:\n      React.memo causes the component to re-render only on\n      prop changes. Default behavior is to re-render every time\n      the parent re-renders.\n  */\n\n  useCountRenders();\n\n  return (\n    <button onClick={() => increment(2)}>\n      boop.\n    </button>\n  )\n});\n\nexport const NumberedBoop = React.memo(({ n, increment }) => {\n\n  useCountRenders();\n\n  return (\n    <button onClick={() => increment(n)}>\n      {n}\n    </button>\n  )\n\n}) ","import React, { useState, useCallback } from 'react';\nimport { Boop, NumberedBoop } from \"../components/useCallbackComponent\";\nimport \"../styles/pages/hooks.scss\";\n\n\nfunction UseCallbackPage() {\n\n  const [counter, updateCounter] = useState(0)\n  const units = [1, 2, 5, 10]\n\n  const increment = useCallback((n) => {\n    updateCounter(c => c + n)\n  }, [updateCounter])\n\n  return(\n    <div className=\"container-fluid\">\n      <div className=\"page-header\">\n        <h1>\n          useCallback\n        </h1>\n        <div className=\"page-subheader\">\n          I wish I had callbacks.\n        </div>\n      </div>\n      <div className=\"hooks-content\">\n        <h2>\n          Basic example.\n        </h2>\n        <div className=\"blurb\">\n          Basic example where we increment a counter with useCallback.\n          This implementation helps us reduce the amount of component\n          renders whenever we increment the count.\n        </div>\n        <div>\n          <div>Counter: {counter}</div>\n          <Boop increment={increment} />\n          {\n            units.map((n) => {\n              return (\n                <NumberedBoop \n                  n={n} \n                  onClick={() => increment(n)} \n                  increment={increment} \n                  key={n}\n                />)\n            })\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UseCallbackPage;"],"sourceRoot":""}